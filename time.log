ESTIMATE of time to complete assignment: 15:00

Date	Started	Spent	WorkCompleted
——	——-	——	——
1113	22:00	1:00	read assignment, planned tree structure, additional functions
1116	22:00	1:00	starting to write simple functions: contains, foreach, destroy
1117	12:00	3:00	wrote add, wrote nearest neighbor without subtree elimination step
1118	20:00	7:00	wrote merge function (adapted from Aspnes code) and create function
1119	10:00	3:00	debugging create, nearest neighbor
		——
		15:00 TOTAL time spent

Did not talk to anyone or attend office hours

The structure of the tree was straightforward, so implementing contains and foreach with a recursive function, as well as destroy, was relatively easy. Kdtree_add was implemented the same way, and it was also relatively easy. At first, I implemented nearest neighbor without checking min distances from other subtrees, so every node was checked for distance, but it wasn’t difficult from there given the location_distance_to_rectangle function to write the O(log(n)) implementation. Create required adapting merge sort, which wasn’t difficult, and then writing a recursive subtree create function. The hardest part was the indexing, which was difficult to wrap my head around but which (if I did it correctly) turned out to be not that complicated after all.